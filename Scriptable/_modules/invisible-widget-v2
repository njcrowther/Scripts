class getImagePath {
    constructor(path) {
        this.imgPath = path;
    }

    async getImage2(scriptname) {
        // return this.imgPath;
        // Determine if user has taken the screenshot
        var message = "Before you start, go to your home screen and enter wiggle mode. Scroll to the empty page on the far right and take a screenshot."
        let exitOptions = ["Continue","Exit to Take Screenshot"]
        // console.log("Generate Alert: " + generateAlert())
        let shouldExit = await generateAlert(message,exitOptions)
        console.log("generated warning alert")
        // if (shouldExit) return
        // return shouldExit

        // Get screenshot and determine phone size.
        let img = await Photos.fromLibrary()
        console.log("Got Photo")
        let height = img.size.height
        console.log("got height: " + height)
        let phone = phoneSizes()[height]
        console.log("got a phone: " + phone)
        if (!phone) {
            message = "It looks like you selected an image that isn't an iPhone screenshot, or your iPhone is not supported. Try again with a different image."
            await generateAlert(message,["OK"])
            return "Failure"
        }

        // Prompt for widget size and position.
        message = "What size of widget are you creating?"
        let sizes = ["Small","Medium","Large"]
        let size = await generateAlert(message,sizes)
        let widgetSize = sizes[size]
        
        message = "What position will it be in?"
        message += (height == 1136 ? " (Note that your device only supports two rows of widgets, so the middle and bottom options are the same.)" : "")

        // Determine image crop based on phone size.
        let crop = { w: "", h: "", x: "", y: "" }
        if (widgetSize == "Small") {
            crop.w = phone.small
            crop.h = phone.small
            let positions = ["Top left","Top right","Middle left","Middle right","Bottom left","Bottom right"]
            let position = await generateAlert(message,positions)
            
            // Convert the two words into two keys for the phone size dictionary.
            let keys = positions[position].toLowerCase().split(' ')
            crop.y = phone[keys[0]]
            crop.x = phone[keys[1]]
            
        } else if (widgetSize == "Medium") {
            crop.w = phone.medium
            crop.h = phone.small
            
            // Medium and large widgets have a fixed x-value.
            crop.x = phone.left
            let positions = ["Top","Middle","Bottom"]
            let position = await generateAlert(message,positions)
            let key = positions[position].toLowerCase()
            crop.y = phone[key]
            
        } else if(widgetSize == "Large") {
            crop.w = phone.medium
            crop.h = phone.large
            crop.x = phone.left
            let positions = ["Top","Bottom"]
            let position = await generateAlert(message,positions)
            
            // Large widgets at the bottom have the "middle" y-value.
            crop.y = position ? phone.middle : phone.top
        }

        // Crop image and finalize the widget.
        let imgCrop = await cropImage(img, new Rect(crop.x,crop.y,crop.w,crop.h))

        // Widgets are unique based on the name of the script.
        const filename = scriptname
        const files = FileManager.local()
        const path = files.joinPath(files.documentsDirectory(), filename)
        files.writeImage(path,imgCrop)

        

        return path
    }

    

    

}

async function generateAlert(message,options) {
    // return "Hello generateAlert"

    let alert = new Alert()
    // return "Hello generateAlert"
    alert.message = message

    for (const option of options) {
        alert.addAction(option)
    }

    let response = alert.presentAlert()
    console.log("Alert Response is: " + response)
    return response
}

function phoneSizes() {
    let phones = {	
        "2688": {
            "small":  507,
            "medium": 1080,
            "large":  1137,
            "left":  81,
            "right": 654,
            "top":    228,
            "middle": 858,
            "bottom": 1488
        },
        
        "1792": {
            "small":  338,
            "medium": 720,
            "large":  758,
            "left":  54,
            "right": 436,
            "top":    160,
            "middle": 580,
            "bottom": 1000
        },
        
        "2436": {
            "small":  465,
            "medium": 987,
            "large":  1035,
            "left":  69,
            "right": 591,
            "top":    213,
            "middle": 783,
            "bottom": 1353
        },
        
        "2208": {
            "small":  471,
            "medium": 1044,
            "large":  1071,
            "left":  99,
            "right": 672,
            "top":    114,
            "middle": 696,
            "bottom": 1278
        },
        
        "1334": {
            "small":  296,
            "medium": 642,
            "large":  648,
            "left":  54,
            "right": 400,
            "top":    60,
            "middle": 412,
            "bottom": 764
        },
        
        "1136": {
            "small":  282,
            "medium": 584,
            "large":  622,
            "left": 30,
            "right": 332,
            "top":  59,
            "middle": 399,
            "bottom": 399
        },
        "1624": {
            "small": 310,
            "medium": 658,
            "large": 690,	
            "left": 46,
            "right": 394,
            "top": 142,
            "middle": 522,
            "bottom": 902 
        }
    }
    return phones   
}

async function cropImage(img,rect) {
    let draw = new DrawContext()
    draw.size = new Size(rect.width, rect.height)

    draw.drawImageAtPoint(img,new Point(-rect.x, -rect.y))  
    return draw.getImage()    
}

// foo = new getImagePath("default/path");

// module.exports.getImage = () => {
//     return new getImagePath("default/path");
// }

module.exports = new getImagePath("default/path")



// let BGImg = new BGImage();
// module.exports = BGImg;

// module.exports = {
//     // bar1: foo.bar1.bind(foo),
//     getImage: BGImage.getImage.bind(BGImage),
//     generateAlert: BGImage.generateAlert.bind(BGImage),
//     phoneSizes: BGImage.phoneSizes.bind(BGImage),
//     cropImage: BGImage.cropImage.bind(BGImage)
// }